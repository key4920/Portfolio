## --------------------------------------
# histogram을 이용한 연속변수 분포확인
# - 전체 데이터 범위를 일정한 구간단위(bin)으로 나누어 빈도수를 카운팅해 막대그래프로 표현
ggplot(mpg, aes(hwy)) + geom_histogram() # 기본적으로 구간을 30개 막대로 표현함
ggplot(mpg, aes(hwy)) +
geom_histogram(bins = 10)
# - 구간을 10개 막대로 구성해 막대의 폭을 상대적으로 넓게 표현함
ggplot(mpg, aes(hwy)) +
geom_histogram(bins = 100)
## --------------------------------------
# density를 이용한 연속변수 분포확인
# - 히스토그램의 빈도수를 비율(발생가능 확률)로 계산해 표현
ggplot(mpg, aes(hwy)) + geom_density() # 기본 밀도 곡선
ggplot(mpg, aes(hwy)) + geom_density(fill = "grey50")
# - 기본 밀도곡선 영역에 색상을 채움(fill)
ggplot(mpg, aes(hwy)) + geom_density(fill = "blue", alpha = 0.2)
## --------------------------------------
# freqpoly를 이용한 연속변수 분포확인
#- 빈도수(frequency)를 다각형곡선(polygonal)으로 표현
ggplot(mpg, aes(hwy)) + geom_freqpoly() # 기본 빈도기반 다각형곡선
ggplot(mpg, aes(hwy)) +
geom_freqpoly(binwidth = 2.5) # 구간간격을 2.5간격으로 상대적으로 넓게
ggplot(mpg, aes(hwy)) +
geom_freqpoly(binwidth = 0.2) # 구간간격을 0.2간격으로 상대적으로 촘촘하게
## ---------------------------------------
## 그룹핑(집단구분) 변수로 drv(구동방식) 변수를 선정해 팩터화
mpg$drv.f <- factor(mpg$drv, levels = c("4", "f", "r"),
labels = c("4륜구동", "전륜구동", "후륜구동"))
library(psych)
psych::headTail(mpg)
psych::headTail(mpg[c("drv", "drv.f")])
table(mpg$drv.f)
## --------------------------------------
## 히스토그램 이용
ggplot(mpg, aes(displ, fill = drv.f)) +
geom_histogram(binwidth = 0.1)
## ---------------------------------------
## 그룹핑(집단구분) 변수로 drv(구동방식) 변수를 선정해 팩터화
mpg$drv.f <- factor(mpg$drv, levels = c("4", "f", "r"),
labels = c("4륜구동", "전륜구동", "후륜구동"))
table(mpg$drv.f, useNA = "ifany")
psych::headTail(mpg)
psych::headTail(mpg[c("drv", "drv.f")])
## --------------------------------------
## 히스토그램 이용
ggplot(mpg, aes(displ, fill = drv.f)) +
geom_histogram(binwidth = 0.1)
ggplot(mpg, aes(displ, fill = drv.f)) +
geom_histogram(binwidth = 0.1) +
facet_wrap(~ drv, ncol = 1)
## --------------------------------------
## 히스토그램 이용 / 요약집계를 시각적으로
ggplot(mpg, aes(displ, fill = drv.f)) +
geom_histogram(binwidth = 0.1)
ggplot(mpg, aes(displ, fill = drv.f)) +
geom_histogram(binwidth = 0.1) +
facet_wrap(~ drv, ncol = 1)
## --------------------------------------
## 히스토그램 이용 / 요약집계를 시각적으로
ggplot(mpg, aes(displ, fill = drv.f)) +
geom_histogram(binwidth = 0.1)
ggplot(mpg, aes(displ, fill = drv.f)) +
geom_histogram(binwidth = 0.1) +
facet_wrap(~ drv, ncol = 1)
## --------------------------------------
## 히스토그램 이용 / 요약집계를 시각적으로
ggplot(mpg, aes(displ, fill = drv.f)) +
geom_histogram(binwidth = 0.1)
ggplot(mpg, aes(displ, fill = drv.f)) +
geom_histogram(binwidth = 0.1) +
facet_wrap(~ drv, ncol = 1)
## --------------------------------------
## 빈도다각형곡선(freqpoly) 이용
# displ(엔진배기량)에 대한 빈도다각형분포를
# drv(구동방식)별로 하나의 그래프 상에서 그룹핑해 분포파악
ggplot(mpg, aes(displ, colour = drv.f)) +
geom_freqpoly(binwidth = 0.5)
# displ(엔진배기량)에 대한 빈도다각형분포를
# drv(구동방식)별로 세분화된 분할그래프 상에서 분포파악
ggplot(mpg, aes(displ, colour = drv.f)) +
geom_freqpoly(binwidth = 0.5) +
facet_wrap(~drv, nrow = 1)
p1 <- ggplot(mpg, aes(displ, fill = drv.f)) + geom_histogram(binwidth = 0.1)
## --------------------------------------
install.packages("plotly")
library(plotly)
p2 <- ggplotly(p1)
p2
p1
p2
p1
p2
mpg # mpg 데이터셋 내용조회, tibble 형식이라 간단하게 조회됨
## --------------------------------------
## 고속도로 연비(hwy)에 대한 기본 플롯팅
ggplot(data = mpg, aes(x = rownames(mpg), y = hwy)) + geom_point()
# - ggplot() 함수의 기본코딩형식
# geom_point warns when missing values have been dropped from the data set
# : 구체적으로 무엇을 그릴지 명시
ggplot(mpg, aes(rownames(mpg), hwy)) +
geom_point()
ggplot(mpg, aes(hwy)) + geom_histogram() # 기본적으로 구간을 30개 막대로 표현함
ggplot(mpg, aes(hwy)) +
geom_histogram(bins = 10)
# - 구간을 10개 막대로 구성해 막대의 폭을 상대적으로 넓게 표현함
ggplot(mpg, aes(hwy)) +
geom_histogram(bins = 100)
## --------------------------------------
# density를 이용한 연속변수 분포확인
# - 히스토그램의 빈도수를 비율(발생가능 확률)로 계산해 표현
ggplot(mpg, aes(hwy)) + geom_density() # 기본 밀도 곡선
ggplot(mpg, aes(hwy)) + geom_density(fill = "grey50")
# - 기본 밀도곡선 영역에 색상을 채움(fill)
ggplot(mpg, aes(hwy)) + geom_density(fill = "blue", alpha = 0.2)
## --------------------------------------
# freqpoly를 이용한 연속변수 분포확인
#- 빈도수(frequency)를 다각형곡선(polygonal)으로 표현
ggplot(mpg, aes(hwy)) + geom_freqpoly() # 기본 빈도기반 다각형곡선
ggplot(mpg, aes(hwy)) +
geom_freqpoly(binwidth = 2.5) # 구간간격을 2.5간격으로 상대적으로 넓게
## ---------------------------------------
## 그룹핑(집단구분) 변수로 drv(구동방식) 변수를 선정해 팩터화
mpg$drv.f <- factor(mpg$drv, levels = c("4", "f", "r"),
labels = c("4륜구동", "전륜구동", "후륜구동"))
psych::headTail(mpg)
psych::headTail(mpg[c("drv", "drv.f")])
table(mpg$drv.f, useNA = "ifany")
## --------------------------------------
## 히스토그램 이용 / 요약집계를 시각적으로
ggplot(mpg, aes(displ, fill = drv.f)) +
geom_histogram(binwidth = 0.1)
## --------------------------------------
## 빈도다각형곡선(freqpoly) 이용
# displ(엔진배기량)에 대한 빈도다각형분포를
# drv(구동방식)별로 하나의 그래프 상에서 그룹핑해 분포파악
ggplot(mpg, aes(displ, colour = drv.f)) +
geom_freqpoly(binwidth = 0.5)
# displ(엔진배기량)에 대한 빈도다각형분포를
# drv(구동방식)별로 세분화된 분할그래프 상에서 분포파악
ggplot(mpg, aes(displ, colour = drv.f)) +
geom_freqpoly(binwidth = 0.5) +
facet_wrap(~drv, nrow = 1)
## 차량 제조사(manufacturer) raw데이터 확인
psych::headTail(mpg)
mpg$manufacturer
## --------------------------------------
## 제조사(manufacturer) 변수에 대한 빈도수 분포
ggplot(mpg, aes(manufacturer)) +
geom_bar()
## --------------------------------------
## 제조사(manufacturer) 변수에 대한 빈도수 분포
ggplot(mpg, aes(manufacturer, fill ="gray50")) +
geom_bar()
## --------------------------------------
## 제조사(manufacturer) 변수에 대한 빈도수 분포
ggplot(mpg, aes(manufacturer, color = "gray")) +
geom_bar()
)
## --------------------------------------
## 제조사(manufacturer) 변수에 대한 빈도수 분포
ggplot(mpg, aes(manufacturer) +
## --------------------------------------
## 제조사(manufacturer) 변수에 대한 빈도수 분포
ggplot(mpg, aes(manufacturer)) +
geom_bar()
## --------------------------------------
## 제조사(manufacturer) 변수에 대한 빈도수 분포
ggplot(mpg, aes(manufacturer)) +
geom_bar()
## --------------------------------------
## 히스토그램 이용 / 요약집계를 시각적으로
ggplot(mpg, aes(displ, fill = drv.f)) +
geom_histogram(binwidth = 0.1)
## --------------------------------------
## 제조사(manufacturer) 변수에 대한 빈도수 분포
ggplot(mpg, aes(manufacturer)) +
geom_bar()
ggplot(mpg, aes(manufacturer)) +
geom_bar(stat = "count")
## --------------------------------------
## 제조사(manufacturer) 변수에 대한 빈도수 분포
ggplot(mpg, aes(manufacturer)) +
geom_bar()
ggplot(mpg, aes(manufacturer)) +
geom_bar(stat = "count")
## --------------------------------------
## 제조사(manufacturer) 변수에 대한 빈도수 분포
ggplot(mpg, aes(manufacturer)) +
geom_bar()
ggplot(mpg, aes(manufacturer)) +
geom_bar(stat = "count")
ggplot(mpg, aes(manufacturer, fill = manufacturer)) +
geom_bar()
ggplot(mpg, aes(hwy)) + geom_density(fill = "grey50")
ggplot(mpg) + geom_density(aes(hwy),fill = "grey50")
ggplot(mpg, aes(manufacturer)) +
geom_bar() + coord_flip()
ggplot(mpg, aes(manufacturer, fill = manufacturer)) +
geom_bar() + coord_flip()
## --------------------------------------
## 제조사(manufacturer)별 차량 빈도수를 별도의 테이블로 생성
mf.counts <- xtabs(~ mpg$manufacturer)
mf.counts
?xtabs()
mf.counts <- as.data.frame(mf.counts)
mf.counts
names(mf.counts)[1] <- c("company") # 빈도테이블의 첫번째 컬럼명 변경
mf.counts
## --------------------------------------
ggplot(data = mf.counts, aes(x = company, y = Freq)) +
geom_bar(stat = "identity")
ggplot(mf.counts, aes(reorder(company, - Freq), Freq)) +
geom_bar(stat = "identity")
?geom_bar
## --------------------------------------
ggplot(data = mf.counts, aes(x = company, y = Freq)) +
geom_bar(stat = "identity")
## --------------------------------------
ggplot(data = mf.counts, aes(x = company, y = Freq)) +
geom_bar()
## --------------------------------------
ggplot(data = mf.counts, aes(x = company, y = Freq)) +
geom_bar(stat = "identity")
mf.counts
?geom_bar()
## --------------------------------------
ggplot(data = mf.counts, aes(x = company, y = Freq)) +
geom_bar(stat)
## --------------------------------------
ggplot(data = mf.counts) +
geom_bar(aes(x=company, y= Freq))
## --------------------------------------
ggplot(data = mf.counts) +
geom_bar(aes(x=company, y= Freq), stat = identity)
## --------------------------------------
ggplot(data = mf.counts) +
geom_bar(aes(x=company, y= Freq), stat = "identity")
## --------------------------------------
ggplot(data = mf.counts, aes(x=company, y= Freq)) +
geom_bar(stat = "identity")
ggplot(mf.counts, aes(reorder(company, - Freq), Freq)) +
geom_bar(stat = "identity")
ggplot(mf.counts, aes(reorder(company, - Freq), Freq, fill = company)) +
geom_bar(stat = "identity")
ggplot(mf.counts, aes(company, Freq)) +
geom_bar(stat = "identity") +
coord_flip()
ggplot(mf.counts, aes(reorder(company, Freq), Freq)) +
geom_bar(stat = "identity") +
coord_flip()
ggplot(mf.counts, aes(reorder(company, - Freq), Freq)) +
geom_bar(stat = "bin")
ggplot(mf.counts, aes(reorder(company, - Freq), Freq)) +
geom_bar(stat = "identity")
## --------------------------------------
ggplot(data = mf.counts, aes(x=company, y= Freq)) +
geom_bar(stat = "bin")
## --------------------------------------
ggplot(data = mf.counts, aes(x=company, y= Freq)) +
geom_bar(stat = "identity")
ggplot(mf.counts, aes(reorder(company, Freq), Freq)) +
geom_bar(stat = "identity") +
coord_flip()
ggplot(mf.counts, aes(reorder(company, Freq), Freq)) +
geom_bar(stat = "identity", fill = rainbow(NROW(mf.counts))) +
coord_flip()
ggplot(data = mf.counts, aes(Freq)) +
geom_bar(stat = "bin")
## --------------------------------------
ggplot(data = mf.counts, aes(x=company, y= Freq)) +
geom_bar(stat = "identity")
ggplot(data = mf.counts, aes(Freq)) +
geom_bar(stat = "bin")
## ggplot2 패키지 설치 및 로딩
# install.packages("ggplot2")
library(ggplot2)
## ggplot2 패키지에 들어 있는 mpg데이터셋 로딩
data(mpg, package = "ggplot2") # mpg 데이터셋 메모리로 로딩
## ggplot() 함수를 이용한 기본플롯팅
# - displ(엔진배기량)에 따른 hwy(고속도로 환경에서 연비)의 변화를 관찰
ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point()
m <- matrix(1:6, nrow = 3)
m
m[3]
m[3,]
m[6]
m[T,F,F]
m <- data.frame(1:6)
m
m <- data.frame(1:6, nrow =3)
m
m <- data.frame(1:6, ncol =2)
m
m <- data.frame(1:6)
m[1]
m <- matrix(1:6, nrow = 3)
m[m[,1]>1 & m[,2]>4]
m[m[,1]>1 | m[,2]>4]
m[m[,1]>1 | m[,2]>5]
matrix(m[m[,1]>1 | m[,2]>5])
1:5*2-1
1:5*2
seq(from =1, to =10,length =5)
m <- matrix(1:6, nrow = 3)
m[m[,1]>1 & m[,2]>5]
m[m[,1]>1 & m[,2]>5,]
m[,1]>1 & m[,2]>5
m[F,F,T]
m[c(F,F,T)]
out <- as.data.frame(age,gender,income,region)
age <- [20,30,40,50]
gender <- ['F','M','M','F']
income <- [1,2,3,4]
age <- c(20,30,40,50)
age <- c(20,30,40,50)
gender <- c('F','M','M','F')
income <- c(1,2,3,4)
region <-c('S','S','G','G')
out <- as.data.frame(age,gender,income,region)
out <- c(age,gender,income,region)
out
out <- as.data.frame(age,gender,income,region)
out2 <- data.frame(out)
out <- c(age,gender,income,region)
out2 <- data.frame(out)
out2
dim(out2) <- c(4,4)
out <- c(age+gender+income+region)
out
age <- t(c(20,30,40,50))
age
out <- data.frame(age = c(20,30,40,50),gender=c('F','M','M','F'),
income=c(1,2,3,4),region=c('S','S','G','G'))
out
melt(out,c('gender','region'))
?melt
library(reshape2)
melt(out,c('gender','region'))
out <- data.frame(age = c(20,30,40,50),gender=c('F','M','M','F'),
income=c(1000,2000,3000,4000),region=c('S','S','G','G'))
out
melt(out,c('gender','region'))
a <- melt(out,c('gender','region'))
cast(a, gender ~ c('region','variable'))
library(reshape2)
cast(a, gender ~ c('region','variable'))
?summarise
?summarize
help("summarise")
if(!require(p,character.only=TRUE)) install.packages(p)
requiredPackages=c("flexclust","NbClust","rattle","cluster","fMultivar","ggplot2")
for(p in requiredPackages){
if(!require(p,character.only=TRUE)) install.packages(p)
}
requiredPackages=c("shiny","d3heatmap","RColorBrewer","DT","fpc","clValid","RankAggreg")
for(p in requiredPackages){
if(!require(p,character.only=TRUE)) install.packages(p)
}
data <- read.csv('podol_final2.csv')
data <- read.csv('podol_final2.csv')
head(data)
summary(data)
X = data[c('April','May','June','July','August','September')]
X = data[c('April','May','June','July','August','September')]
X[is.na(X)] <- 0
set.seed(1234)
library(cluster)
library(factoextra)
library(factoextra)
hX <- X
options(digits=3)
raw.scaled <- scale(hX)
d <- dist(raw.scaled)
library(factoextra)
res.dist <- get_dist(d, stand = TRUE, method = "pearson")
fviz_dist(res.dist,
gradient = list(low = "#00AFBB",
mid = "white",
high = "#FC4E07"))
X = data[c('April','May','June','July','August','September')]
X[is.na(X)] <- 0
set.seed(1234)
library(cluster)
hX <- X
options(digits=3)
raw.scaled <- scale(hX)
d <- dist(raw.scaled)
library(factoextra)
res.dist <- get_dist(d, stand = TRUE, method = "pearson")
fviz_dist(res.dist,
gradient = list(low = "#00AFBB",
mid = "white",
high = "#FC4E07"))
hX
library(factoextra)
res.dist <- get_dist(d, stand = TRUE, method = "pearson")
fviz_dist(res.dist,
gradient = list(low = "#00AFBB",
mid = "white",
high = "#FC4E07"))
d
raw.sclaed
raw.scaled
dist(raw.scaled)
View(dist(raw.scaled))
fit.average <- hclust(d, method="ward")
fit.average <- hclust(d, method="ward.D")
plot(fit.average, hang=-1, cex=.8,
main="평균연결법을 활용한 계층적 군집분석")
str(fit.average) # 군집분석 결과 내부구조확인
fit.average$order
library(NbClust)
nc <- NbClust(raw.scaled, distance="euclidean",
min.nc=2, max.nc=15, method="average")
nc <- NbClust(raw.scaled, distance="euclidean",
min.nc=100, max.nc=115, method="average")
nc # 26개 군집갯수 선정기준의 계산결과
par(mfrow=c(1, 1)) # 플로팅창 원래대로 리셋
nc$Best.nc # 26개 기준별 추천 군집정보
nc$Best.nc[1, ] # 26개 기준별 추천 군집갯수
table(nc$Best.nc[1,]) # 추천군집갯수별 빈도수 계산
barplot(table(nc$Best.nc[1,]),
xlab="추천된 군집갯수", ylab="군집산정 기준 갯수",
main="26개 군집갯수 산정기준을 통한 추천군집갯수")
###################################################################
##### 라이브러리 준비
library("dplyr")
source('~/.active-rstudio-document', echo=TRUE)
source('~/Documents/Python/bproject/brazil/r decision tree.R', echo=TRUE)
source('~/Documents/Python/bproject/brazil/r decision tree.R', echo=TRUE)
source('~/Documents/Python/bproject/brazil/r decision tree.R', echo=TRUE)
source('~/Documents/Python/bproject/brazil/r decision tree.R', echo=TRUE)
source('~/Documents/Python/bproject/brazil/r decision tree.R', echo=TRUE)
###################################################################
##### 라이브러리 준비
library("dplyr")
library("magrittr")
##### 데이터 로딩
raw <- read.csv("tree_data.csv", header=T, sep=",",
stringsAsFactors = F, # 팩터화 없이 일반적 로딩
strip.white = T, # 데이터 요소별 좌우 공백 제거
na.strings = "") # 데이터 중 ""표시부분 NA로 인식
source('~/Documents/Python/bproject/brazil/r decision tree.R', echo=TRUE)
##### 데이터 로딩
raw <- read.csv("./Documents/Python/bproject/brazil/tree_data.csv", header=T, sep=",",
stringsAsFactors = F, # 팩터화 없이 일반적 로딩
strip.white = T, # 데이터 요소별 좌우 공백 제거
na.strings = "") # 데이터 중 ""표시부분 NA로 인식
##### 데이터 간단정보조회
raw
##### 데이터 간단정보조회
raw
set.seed(1234)
X = data[c('April','May','June','July','August','September')]
X[is.na(X)] <- 0
set.seed(1234)
library(cluster)
mx <- read.csv('mx.csv')
head(mx)
x <- mx[c('gap1','gap2','gap3','gap4','gap5')]
set.seed(1245)
library(NbClust)
mnc <- NbClust(x, distance="euclidean",
min.nc=2, max.nc=15, method="average")
library(networkD3)
g <- read.graph('wgt_ctg3graph.graphml', format = 'graphml')
#install.packages("GGally")
library(GGally)
#install.packages('network')
#install.packages('sna')
library(network)
library(sna)
library(ggplot2)
library(plotly)
setwd('/Users/YiYoung/Documents/Python/lpoint/네트워크')
list.files()
library(igraph)
g <- read.graph('wgt_ctg3graph.graphml', format = 'graphml')
#getwd()
#network <- read.csv('network.csv')
#install.packages('networkD3')
library(networkD3)
library(dplyr)
gg <- igraph_to_networkD3(g)
node <- read.csv('btwness_centrality.csv')
btw <- read.csv('btwness_centrality.csv')
class(gg)
node
library(networkD3)
forceNetwork(Links = gg$links, Nodes = gg$nodes,
Source = 'source', Target = 'target', NodeID = 'name',
Group = 'group')
library(networkD3)
forceNetwork(Links = gg$links, Nodes = gg$nodes,
Source = 'source', Target = 'target', NodeID = 'name'
library(networkD3)
forceNetwork(Links = gg$links, Nodes = gg$nodes,
Source = 'source', Target = 'target', NodeID = 'name')
forceNetwork(Links = gg$links, Nodes = gg$nodes,
Source = 'source', Target = 'target', NodeID = 'name',
Group = 'group')
gg$links
gg$nodes
gg$source
gg
g$name
g$id
g$nodes
g$node
g
g$id
g
